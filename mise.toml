[tools]
node = "20"
go = "1.23"
opentofu = "latest"
firebase = "latest"
# Air for Go hot reloading
air = "latest"
# OpenAPI tools
"npm:@openapitools/openapi-generator-cli" = "latest"

# Environment configurations
[env]
# === GLOBAL STATIC CONFIGURATION ===
# These values are the same across all environments
DIKTATOR_APP_NAME = "diktator"
DIKTATOR_API_SERVICE_NAME = "diktator-api"
DIKTATOR_DEFAULT_REGION = "europe-north1"
DIKTATOR_BUCKET_LOCATION = "EU"

# === DEVELOPMENT ENVIRONMENT ===
# Backend configuration for development
NODE_ENV = "development"
GOOGLE_CLOUD_PROJECT = "diktator-dev"
GOOGLE_CLOUD_QUOTA_PROJECT = "diktator-app"
STORAGE_BUCKET = "diktator-dev.appspot.com"
GIN_MODE = "debug"

# Firebase Emulator hosts (backend services)
FIREBASE_AUTH_EMULATOR_HOST = "localhost:9099"
FIRESTORE_EMULATOR_HOST = "localhost:8088"
FIREBASE_STORAGE_EMULATOR_HOST = "localhost:9199"

# Frontend configuration for development
NEXT_PUBLIC_API_URL = "http://localhost:8080"
NEXT_PUBLIC_FIREBASE_USE_EMULATOR = "true"
NEXT_PUBLIC_FIREBASE_PROJECT_ID = "diktator-dev"
NEXT_PUBLIC_FIREBASE_API_KEY = "demo-key"
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN = "diktator-dev.firebaseapp.com"
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET = "diktator-dev.appspot.com"
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID = "123456789"
NEXT_PUBLIC_FIREBASE_APP_ID = "1:123456789:web:abcdef"

# Core development tasks
[tasks.install]
description = "Install all dependencies"
run = [
  "cd frontend && npm install",
  "cd backend && go mod tidy",
  "go install github.com/swaggo/swag/cmd/swag@latest",
]

[tasks.dev]
description = "Start full development environment (Firebase emulators + frontend + backend with auto-reload)"
run = """
echo "Starting full development environment..."
echo "This will start:"
echo "  - Firebase emulators (Auth: :9099, Firestore: :8088, UI: :4000)"
echo "  - Frontend dev server (:3000)"
echo "  - Backend API server with auto-reload (:8080)"
echo ""

# Ensure development config exists
if [ ! -f backend/.env.development ] || [ ! -f frontend/.env.development ]; then
    echo "Setting up development configuration..."
    mise run config-dev
fi

# Start Firebase emulators in background
mise run firebase-emulators &
FIREBASE_PID=$!
echo "Firebase emulators started with PID: $FIREBASE_PID"

# Wait for Firebase emulators to start
sleep 3

# Start backend with air (hot reload) in background
cd backend && set -a && source .env.development && set +a && air &
BACKEND_PID=$!
echo "Backend started with auto-reload, PID: $BACKEND_PID"

# Wait a moment for backend to start
sleep 2

# Start frontend (this will block)
cd frontend && cp .env.development .env.local && npm run dev

# Cleanup function
cleanup() {
    echo "Stopping services..."
    kill $FIREBASE_PID 2>/dev/null || true
    kill $BACKEND_PID 2>/dev/null || true
}
trap cleanup EXIT
"""

[tasks.frontend]
description = "Start frontend development server only"
run = """
# Ensure development config exists
if [ ! -f frontend/.env.development ]; then
    echo "Setting up development configuration..."
    mise run config-dev
fi

cd frontend
cp .env.development .env.local
npm run dev
"""

[tasks.backend]
description = "Start backend development server with auto-reload"
run = """
# Ensure development config exists
if [ ! -f backend/.env.development ]; then
    echo "Setting up development configuration..."
    mise run config-dev
fi

cd backend
set -a && source .env.development && set +a && air
"""

# Quality assurance tasks
[tasks.lint]
description = "Run linting for all components"
run = ["cd frontend && npm run lint", "cd backend && go vet ./..."]

[tasks.format]
description = "Format all code"
run = [
  "cd frontend && npm run format",
  "cd backend && go fmt ./...",
  "mise run tofu-fmt",
]

[tasks.typecheck]
description = "Run type checking for all components"
run = [
  "cd frontend && npm run typecheck",
  "cd backend && go build -o /dev/null ./...",
]

[tasks.test]
description = "Run all tests and checks"
run = """
echo "üß™ Running tests and checks..."

# Check if Firebase emulator is running, start if not
if ! pgrep -f "firebase.*emulators:start" > /dev/null; then
    echo "üî• Firebase emulator not running, starting it without persistence for testing..."
    mise run firebase-emulators --no-persist &
    FIREBASE_PID=$!
    echo "Firebase emulators started with PID: $FIREBASE_PID"

    # Wait for Firebase emulators to start
    echo "Waiting for Firebase emulators to be ready..."
    sleep 5

    # Set flag to stop emulator after tests
    STARTED_EMULATOR=true
else
    echo "‚úÖ Firebase emulator is already running"
    STARTED_EMULATOR=false
fi

# Run the actual tests
echo "Running linting..."
mise run lint

echo "Running type checking..."
mise run typecheck

echo "Running backend tests..."
cd backend && go test ./...

# Stop emulator if we started it
if [ "$STARTED_EMULATOR" = "true" ]; then
    echo "üõë Stopping Firebase emulator that was started for testing..."

    # First try to gracefully stop the emulator
    if kill -TERM $FIREBASE_PID 2>/dev/null; then
        echo "Sent graceful shutdown signal to Firebase emulator..."

        # Wait for graceful shutdown (up to 10 seconds)
        for i in {1..10}; do
            if ! kill -0 $FIREBASE_PID 2>/dev/null; then
                echo "Firebase emulator stopped gracefully"
                break
            fi
            sleep 1
        done

        # If still running after 10 seconds, force kill
        if kill -0 $FIREBASE_PID 2>/dev/null; then
            echo "Force stopping Firebase emulator..."
            kill -KILL $FIREBASE_PID 2>/dev/null || true
        fi
    else
        echo "Firebase emulator process already stopped"
    fi

    # Additional cleanup for any remaining firebase processes
    pkill -f "firebase.*emulators:start" 2>/dev/null || true
fi

echo "‚úÖ All tests completed successfully!"
"""

# OpenAPI tasks
[tasks.swagger-gen]
description = "Generate OpenAPI documentation from Go annotations"
run = """
echo "üî® Generating OpenAPI specification..."
cd backend
# Install swag if not available
if ! command -v swag &> /dev/null; then
    echo "Installing swag..."
    go install github.com/swaggo/swag/cmd/swag@latest
fi
# Generate swagger docs
swag init -g cmd/server/main.go --output docs --parseInternal
echo "‚úÖ OpenAPI spec generated in backend/docs/"
"""

[tasks.client-gen]
description = "Generate TypeScript client from OpenAPI spec"
run = """
echo "üöÄ Generating TypeScript client from OpenAPI spec..."

# Check if backend is running
if ! curl -s -f "http://localhost:8080/health" > /dev/null; then
    echo "‚ùå Backend is not running on http://localhost:8080"
    echo "   Please start it with: mise run backend"
    exit 1
fi

echo "‚úÖ Backend is running"

# Download OpenAPI spec
echo "üì• Downloading OpenAPI spec..."
curl -s "http://localhost:8080/swagger/doc.json" > /tmp/diktator-api.json

# Check if spec was downloaded successfully
if [ ! -s /tmp/diktator-api.json ]; then
    echo "‚ùå Failed to download OpenAPI spec"
    exit 1
fi

echo "‚úÖ OpenAPI spec downloaded"

# Create output directory
mkdir -p frontend/src/generated

# Generate TypeScript client
echo "üî® Generating TypeScript client..."
cd frontend
npx @openapitools/openapi-generator-cli generate \
    -i /tmp/diktator-api.json \
    -g typescript-axios \
    -o src/generated \
    --additional-properties=npmName=diktator-api-client,npmVersion=1.0.0,supportsES6=true,withInterfaces=true

echo "‚úÖ TypeScript client generated in frontend/src/generated"
"""

[tasks.api-setup]
description = "Complete OpenAPI setup: generate docs and client"
run = [
  "mise run swagger-gen",
  "echo 'Starting backend for client generation...'",
  "cd backend && PORT=8080 go run cmd/server/main.go &",
  "sleep 3",
  "mise run client-gen",
  "pkill -f 'go run cmd/server/main.go' || true",
]

# Build tasks
[tasks.build]
description = "Build all components for production"
run = [
  "mise run swagger-gen",
  "mise run config-prod",
  "cd frontend && cp .env.production .env.local && NODE_ENV=production npm run build",
  "cd backend && set -a && source .env.production && set +a && go build -o bin/server cmd/server/main.go",
]

[tasks.clean]
description = "Clean build artifacts and generated environment files"
run = [
  "rm -rf frontend/.next frontend/out",
  "rm -rf backend/bin",
  "rm -rf frontend/src/generated",
  "rm -f frontend/.env.local",
  "rm -f backend/.env.development backend/.env.production",
  "rm -f frontend/.env.development frontend/.env.production",
  "rm -f .mise.env",
]

# Infrastructure tasks
[tasks.tofu-init]
description = "Initialize OpenTofu"
run = "cd terraform && tofu init"

[tasks.tofu-plan]
description = "Plan OpenTofu deployment"
run = "cd terraform && tofu plan"

[tasks.tofu-apply]
description = "Apply OpenTofu configuration"
run = "cd terraform && tofu apply"

[tasks.tofu-destroy]
description = "Destroy OpenTofu infrastructure"
run = "cd terraform && tofu destroy"

[tasks.tofu-fmt]
description = "Format OpenTofu configuration files"
run = "cd terraform && tofu fmt"

[tasks.tofu-validate]
description = "Validate OpenTofu configuration"
run = "cd terraform && tofu validate"

# Setup and utility tasks
[tasks.setup]
description = "Complete setup for local development (run this first!)"
run = """
echo "Setting up Diktator development environment..."

# Run the original setup script
./scripts/setup-dev.sh

# Set up environment configurations
echo "Setting up environment configurations..."
mise run config-dev

echo ""
echo "‚úÖ Setup complete! You can now:"
echo "  - Start development: mise run dev"
echo "  - Check configuration: mise run config-check"
echo "  - Start individual services:"
echo "    - Frontend only: mise run frontend"
echo "    - Backend only: mise run backend"
echo "    - Firebase emulators: mise run firebase-emulators"
"""

# Docker tasks
[tasks.docker-build]
description = "Build Docker image locally"
run = """
cd backend
docker build -t diktator-api:local .
echo "Docker image built: diktator-api:local"
"""

[tasks.docker-run]
description = "Run backend Docker container locally"
run = """
docker run -p 8080:8080 -e GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-diktator-dev} diktator-api:local
"""

# CI/CD tasks
[tasks.ci-test]
description = "Run all tests for CI (both frontend and backend)"
run = [
  "cd frontend && npm ci && npm run lint && npm run typecheck",
  "cd backend && go mod tidy && go test ./... && go vet ./...",
]

[tasks.ci-build-backend]
description = "Build backend for CI/CD"
run = """
PROJECT_ID=${GOOGLE_CLOUD_PROJECT:-${DIKTATOR_PROJECT_ID}}
COMMIT_SHA=${GITHUB_SHA:-latest}
SERVICE_NAME=${DIKTATOR_API_SERVICE_NAME}

if [ -z "$PROJECT_ID" ]; then
  echo "Error: GOOGLE_CLOUD_PROJECT not set"
  exit 1
fi

cd backend
echo "Building Docker image: gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA}"
docker buildx build --platform linux/amd64 --build-arg TARGETOS=linux --build-arg TARGETARCH=amd64 -t gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA} --load .
docker push gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA}
"""

[tasks.ci-build-frontend]
description = "Build frontend for CI/CD"
run = """
cd frontend

# Create production environment file for CI
cat > .env.production << EOF
# CI/CD Production Environment
NODE_ENV=production
NEXT_PUBLIC_FIREBASE_USE_EMULATOR=false
NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL_PROD:-"https://${DIKTATOR_API_SERVICE_NAME}-${DIKTATOR_DEFAULT_REGION}.run.app"}
NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID_PROD:-${GOOGLE_CLOUD_PROJECT}}
NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY_PROD:-""}
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN_PROD:-"${GOOGLE_CLOUD_PROJECT}.firebaseapp.com"}
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET_PROD:-"${GOOGLE_CLOUD_PROJECT}.appspot.com"}
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID_PROD:-""}
NEXT_PUBLIC_FIREBASE_APP_ID=${NEXT_PUBLIC_FIREBASE_APP_ID_PROD:-""}
NEXT_TELEMETRY_DISABLED=1
EOF

npm ci
cp .env.production .env.local
npm run build
"""

[tasks.ci-deploy-backend]
description = "Deploy backend for CI/CD"
run = """
PROJECT_ID=${GOOGLE_CLOUD_PROJECT:-${DIKTATOR_PROJECT_ID}}
COMMIT_SHA=${GITHUB_SHA:-latest}
SERVICE_NAME=${DIKTATOR_API_SERVICE_NAME}
REGION=${GCP_REGION:-${DIKTATOR_DEFAULT_REGION}}

if [ -z "$PROJECT_ID" ]; then
  echo "Error: GOOGLE_CLOUD_PROJECT not set"
  exit 1
fi

echo "Deploying backend: gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA} to region: ${REGION}"
gcloud run deploy ${SERVICE_NAME} \
  --image gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA} \
  --region ${REGION} \
  --platform managed \
  --allow-unauthenticated \
  --set-env-vars="GOOGLE_CLOUD_PROJECT=${PROJECT_ID}"
"""

[tasks.ci-deploy-frontend]
description = "Deploy frontend for CI/CD"
run = """
gsutil -m cp -r frontend/out/* gs://${GCP_FRONTEND_BUCKET}/
echo "Setting cache headers for deployed files..."
gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" -h "Pragma:no-cache" -h "Expires:0" gs://${GCP_FRONTEND_BUCKET}/index.html
gsutil -m setmeta -h "Cache-Control:public, max-age=300" gs://${GCP_FRONTEND_BUCKET}/**/*.html
gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" -h "Pragma:no-cache" -h "Expires:0" gs://${GCP_FRONTEND_BUCKET}/index.html
gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${GCP_FRONTEND_BUCKET}/**/*.{js,css,png,jpg,jpeg,gif,ico,svg}
echo "Invalidating CDN cache for key routes..."
PROJECT_ID=${GOOGLE_CLOUD_PROJECT:-${GCP_PROJECT_ID}}
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/" --async || echo "Cache invalidation failed for /"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/wordsets" --async || echo "Cache invalidation failed for /wordsets"
gcloud compute url-maps.invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/wordsets/" --async || echo "Cache invalidation failed for /wordsets/"
gcloud compute url-maps.invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/about" --async || echo "Cache invalidation failed for /about"
gcloud compute url-maps.invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/about/" --async || echo "Cache invalidation failed for /about/"
echo "CDN cache invalidation initiated"
"""

# Deployment tasks for local development
[tasks.deploy-backend]
description = "Deploy backend to Cloud Run (local development)"
run = """
# Load configuration
mise run config-load
source .mise.env
mise run config-prod

# Validate required environment variables
if [ -z "${DIKTATOR_PROJECT_ID}" ]; then
    echo "ERROR: DIKTATOR_PROJECT_ID is not set. Run 'mise run config-load' first."
    exit 1
fi

cd backend
echo "Building backend Docker image..."
docker buildx build --platform linux/amd64 -t gcr.io/${DIKTATOR_PROJECT_ID}/${DIKTATOR_API_SERVICE_NAME}:latest --load .
docker push gcr.io/${DIKTATOR_PROJECT_ID}/${DIKTATOR_API_SERVICE_NAME}:latest

echo "Deploying backend to Cloud Run..."
gcloud run deploy ${DIKTATOR_API_SERVICE_NAME} \
  --image gcr.io/${DIKTATOR_PROJECT_ID}/${DIKTATOR_API_SERVICE_NAME}:latest \
  --region ${DIKTATOR_REGION} \
  --platform managed \
  --allow-unauthenticated \
  --set-env-vars="GOOGLE_CLOUD_PROJECT=${DIKTATOR_PROJECT_ID},GOOGLE_CLOUD_QUOTA_PROJECT=${GOOGLE_CLOUD_QUOTA_PROJECT:-${DIKTATOR_PROJECT_ID}},STORAGE_BUCKET=${DIKTATOR_FIREBASE_STORAGE_BUCKET:-${DIKTATOR_PROJECT_ID}.appspot.com},GIN_MODE=release"

echo "Backend deployment completed successfully!"
echo "API URL: https://${DIKTATOR_API_SERVICE_NAME}-${DIKTATOR_REGION}.run.app"
"""

[tasks.deploy-frontend]
description = "Deploy frontend to Cloud Storage (local development)"
run = """
# Load configuration and set up production environment
mise run config-load
source .mise.env
mise run config-prod

cd frontend

echo "Building frontend with production environment..."
cp .env.production .env.local
NODE_ENV=production npm run build

# Verify build was successful
if [ ! -d "out" ]; then
    echo "ERROR: Build failed. 'out' directory not found."
    exit 1
fi

echo "Deploying to Cloud Storage..."
gsutil -m cp -r out/* gs://${DIKTATOR_FRONTEND_BUCKET}/
# Cache headers and CDN invalidation
gsutil -m setmeta -h "Cache-Control:no-cache" gs://${DIKTATOR_FRONTEND_BUCKET}/index.html
gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.{js,css}
gcloud compute url-maps invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/" --async
gcloud compute url-maps.invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/wordsets/" --async
gcloud compute url-maps.invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/about/" --async
gcloud compute url-maps.invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/auth/" --async
gcloud compute url-maps.invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/test/" --async

echo "Frontend deployment completed successfully!"
"""

# Additional development utilities
[tasks.check]
description = "Alias for test - run all quality checks"
run = "mise run test"

[tasks.fmt]
description = "Alias for format - format all code"
run = "mise run format"

# Google Cloud setup tasks
[tasks.gcloud-auth]
description = "Authenticate with Google Cloud"
run = """
echo "Starting Google Cloud authentication..."
gcloud auth login
gcloud auth application-default login
echo "Authentication completed!"
"""

[tasks.gcloud-set-project]
description = "Set Google Cloud project (pass project ID as argument)"
run = """
if [ -z "$1" ]; then
  echo "Usage: mise run gcloud-set-project -- YOUR_PROJECT_ID"
  echo "Current project: $(gcloud config get-value project 2>/dev/null || echo 'Not set')"
  exit 1
fi
echo "Setting Google Cloud project to: $1"
gcloud config set project "$1"
echo "Project set successfully!"
"""

# Firebase setup
[tasks.firebase-setup]
description = "Set up Firebase emulators and configuration"
run = """
echo "Setting up Firebase for local development..."

# Check if Firebase CLI is installed
if ! command -v firebase &> /dev/null; then
    echo "Installing Firebase CLI..."
    npm install -g firebase-tools
fi

# Initialize Firebase in frontend directory if not already done
cd frontend

if [ ! -f firebase.json ]; then
    echo "Firebase configuration not found. Setting up Firebase emulators..."

    # Create basic firebase.json for emulators
    cat > firebase.json << 'EOF'
{
  "emulators": {
    "auth": {
      "port": 9099
    },
    "firestore": {
      "port": 8088
    },
    "ui": {
      "enabled": true,
      "port": 4000
    }
  }
}
EOF
    echo "‚úÖ firebase.json created"
fi

if [ ! -f firestore.rules ]; then
    cat > firestore.rules << 'EOF'
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to read and write their own test results
    match /testResults/{resultId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
EOF
    echo "‚úÖ firestore.rules created"
fi

if [ ! -f firestore.indexes.json ]; then
    cat > firestore.indexes.json << 'EOF'
{
  "indexes": [
    {
      "collectionGroup": "testResults",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "completedAt",
          "order": "DESCENDING"
        }
      ]
    }
  ],
  "fieldOverrides": []
}
EOF
    echo "‚úÖ firestore.indexes.json created"
fi

# Create environment file if it doesn't exist
if [ ! -f .env.local ]; then
    if [ -f .env.local.example ]; then
        cp .env.local.example .env.local
        echo "‚úÖ .env.local created from example"
    else
        echo "Creating basic .env.local for Firebase emulators..."
        cat > .env.local << 'EOF'
# Firebase Emulator Configuration
NEXT_PUBLIC_FIREBASE_USE_EMULATOR=true
NEXT_PUBLIC_FIREBASE_API_KEY=demo-api-key
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=demo-diktator.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=demo-diktator
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=demo-diktator.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=demo-sender-id
NEXT_PUBLIC_FIREBASE_APP_ID=demo-app-id
EOF
        echo "‚úÖ .env.local created with emulator configuration"
    fi
fi

echo ""
echo "Firebase setup complete! You can now run 'mise run firebase-emulators' to start the emulators."
"""

[tasks.firebase-emulators]
description = "Start Firebase emulators (use --no-persist flag to disable data persistence)"
run = """
cd frontend

# Setup signal handling for graceful shutdown
cleanup() {
    echo "Received shutdown signal, stopping Firebase emulators..."
    if [ -n "$EMULATOR_PID" ]; then
        kill -TERM $EMULATOR_PID 2>/dev/null || true
        wait $EMULATOR_PID 2>/dev/null || true
    fi
    exit 0
}
trap cleanup TERM INT

if [ '{{flag(name="no-persist")}}' = 'true' ]; then
    echo "Starting Firebase emulators without data persistence..."
    echo "This will start:"
    echo "  - Authentication emulator on port 9099"
    echo "  - Firestore emulator on port 8088"
    echo "  - Emulator UI on port 4000"
    echo ""
    echo "‚ö†Ô∏è  Data will NOT be persisted - perfect for testing!"
    echo ""

    firebase emulators:start --project=${GOOGLE_CLOUD_PROJECT} &
    EMULATOR_PID=$!
    wait $EMULATOR_PID
else
    echo "Starting Firebase emulators with data persistence..."
    echo "This will start:"
    echo "  - Authentication emulator on port 9099"
    echo "  - Firestore emulator on port 8088"
    echo "  - Emulator UI on port 4000"
    echo ""
    echo "Data will be persisted in: ./firebase-emulator-data"
    echo "Press Ctrl+C to stop the emulators (data will be automatically exported)"
    echo ""

    # Check if emulator data exists
    if [ -d "./firebase-emulator-data" ] && [ "$(ls -A ./firebase-emulator-data 2>/dev/null)" ]; then
        echo "Found existing emulator data, importing..."
        firebase emulators:start --project=${GOOGLE_CLOUD_PROJECT} --import=./firebase-emulator-data --export-on-exit=./firebase-emulator-data &
        EMULATOR_PID=$!
        wait $EMULATOR_PID
    else
        echo "No existing data found, starting fresh..."
        firebase emulators:start --project=${GOOGLE_CLOUD_PROJECT} --export-on-exit=./firebase-emulator-data &
        EMULATOR_PID=$!
        wait $EMULATOR_PID
    fi
fi
"""

[tasks.firebase-emulators-reset]
description = "Reset Firebase emulator data (delete all persistent data)"
run = """
cd frontend
echo "WARNING: This will delete all Firebase emulator data!"
read -p "Are you sure? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Removing emulator data..."
    rm -rf ./firebase-emulator-data
    echo "Emulator data reset complete"
else
    echo "Reset cancelled"
fi
"""

# Configuration management tasks
[tasks.config-load]
description = "Load dynamic configuration from terraform outputs"
run = """
echo "Loading dynamic configuration..."
cd terraform

# Check if terraform is initialized
if [ ! -d .terraform ]; then
    echo "Terraform not initialized. Run 'mise run tofu-init' first."
    exit 1
fi

# Check if tfstate exists
if [ ! -f terraform.tfstate ]; then
    echo "No terraform state found. Infrastructure may not be deployed yet."
    echo "Run 'mise run tofu-apply' to deploy infrastructure first."
    exit 1
fi

# Extract outputs and create .mise.env
echo "Extracting terraform outputs..."
cat > ../.mise.env << EOF
# Auto-generated from terraform outputs - do not edit manually
# === PRODUCTION/DEPLOYED CONFIGURATION ===
DIKTATOR_PROJECT_ID=$(tofu output -raw project_id 2>/dev/null || echo "")
DIKTATOR_REGION=$(tofu output -raw region 2>/dev/null || echo "${DIKTATOR_DEFAULT_REGION}")
DIKTATOR_FRONTEND_BUCKET=$(tofu output -raw frontend_bucket_name 2>/dev/null || echo "")
DIKTATOR_API_URL=$(tofu output -raw api_url 2>/dev/null || echo "")

# Firebase configuration from terraform outputs
DIKTATOR_FIREBASE_API_KEY=$(tofu output -json firebase_config 2>/dev/null | jq -r '.apiKey' 2>/dev/null || echo "")
DIKTATOR_FIREBASE_AUTH_DOMAIN=$(tofu output -json firebase_config 2>/dev/null | jq -r '.authDomain' 2>/dev/null || echo "")
DIKTATOR_FIREBASE_STORAGE_BUCKET=$(tofu output -json firebase_config 2>/dev/null | jq -r '.storageBucket' 2>/dev/null || echo "")
DIKTATOR_FIREBASE_MESSAGING_SENDER_ID=$(tofu output -json firebase_config 2>/dev/null | jq -r '.messagingSenderId' 2>/dev/null || echo "")
DIKTATOR_FIREBASE_APP_ID=$(tofu output -json firebase_config 2>/dev/null | jq -r '.appId' 2>/dev/null || echo "")
EOF

echo "Configuration loaded to .mise.env"
"""

[tasks.config-dev]
description = "Set up development environment configuration"
run = """
echo "Setting up development environment configuration..."

# Create development backend environment
cat > backend/.env.development << EOF
# === BACKEND DEVELOPMENT CONFIGURATION ===
# Google Cloud settings
GOOGLE_CLOUD_PROJECT=diktator-dev
GOOGLE_CLOUD_QUOTA_PROJECT=diktator-app
STORAGE_BUCKET=diktator-dev.appspot.com

# Application settings
GIN_MODE=debug
PORT=8080

# Firebase Emulator hosts
FIREBASE_AUTH_EMULATOR_HOST=localhost:9099
FIRESTORE_EMULATOR_HOST=localhost:8088
FIREBASE_STORAGE_EMULATOR_HOST=localhost:9199
EOF

# Create development frontend environment
mkdir -p frontend
cat > frontend/.env.development << EOF
# === FRONTEND DEVELOPMENT CONFIGURATION ===
# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:8080

# Firebase Emulator Configuration
NEXT_PUBLIC_FIREBASE_USE_EMULATOR=true
NEXT_PUBLIC_FIREBASE_PROJECT_ID=diktator-dev
NEXT_PUBLIC_FIREBASE_API_KEY=demo-key
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=diktator-dev.firebaseapp.com
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=diktator-dev.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=123456789
NEXT_PUBLIC_FIREBASE_APP_ID=1:123456789:web:abcdef

# Development optimizations
NEXT_TELEMETRY_DISABLED=1
NODE_ENV=development
EOF

echo "‚úÖ Development configuration files created:"
echo "  - backend/.env.development"
echo "  - frontend/.env.development"
echo ""
echo "These files contain environment-specific settings for local development."
"""

[tasks.config-prod]
description = "Generate production environment configuration from terraform outputs"
run = """
echo "Generating production environment configuration..."

# Load dynamic configuration first
if [ -f .mise.env ]; then
    source .mise.env
else
    echo "ERROR: .mise.env not found. Run 'mise run config-load' first."
    exit 1
fi

# Validate required environment variables
if [ -z "${DIKTATOR_PROJECT_ID}" ]; then
    echo "ERROR: DIKTATOR_PROJECT_ID is not set. Run 'mise run config-load' first."
    exit 1
fi

# Create production backend environment
cat > backend/.env.production << EOF
# === BACKEND PRODUCTION CONFIGURATION ===
# Google Cloud settings
GOOGLE_CLOUD_PROJECT=${DIKTATOR_PROJECT_ID}
GOOGLE_CLOUD_QUOTA_PROJECT=${GOOGLE_CLOUD_QUOTA_PROJECT:-${DIKTATOR_PROJECT_ID}}
STORAGE_BUCKET=${DIKTATOR_FIREBASE_STORAGE_BUCKET:-${DIKTATOR_PROJECT_ID}.appspot.com}

# Application settings
GIN_MODE=release
PORT=8080

# No emulator hosts in production (use real Firebase services)
EOF

# Create production frontend environment
mkdir -p frontend
cat > frontend/.env.production << EOF
# === FRONTEND PRODUCTION CONFIGURATION ===
# API Configuration
NEXT_PUBLIC_API_URL=${DIKTATOR_API_URL:-"https://${DIKTATOR_API_SERVICE_NAME}-${DIKTATOR_REGION:-${DIKTATOR_DEFAULT_REGION}}.run.app"}

# Firebase Production Configuration
NEXT_PUBLIC_FIREBASE_USE_EMULATOR=false
NEXT_PUBLIC_FIREBASE_PROJECT_ID=${DIKTATOR_PROJECT_ID}
NEXT_PUBLIC_FIREBASE_API_KEY=${DIKTATOR_FIREBASE_API_KEY:-""}
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${DIKTATOR_FIREBASE_AUTH_DOMAIN:-""}
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${DIKTATOR_FIREBASE_STORAGE_BUCKET:-""}
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${DIKTATOR_FIREBASE_MESSAGING_SENDER_ID:-""}
NEXT_PUBLIC_FIREBASE_APP_ID=${DIKTATOR_FIREBASE_APP_ID:-""}

# Production optimizations
NEXT_TELEMETRY_DISABLED=1
NODE_ENV=production
EOF

echo "‚úÖ Production configuration files created:"
echo "  - backend/.env.production"
echo "  - frontend/.env.production"
echo ""
echo "=== Production Configuration Summary ==="
echo "API URL: ${DIKTATOR_API_URL:-"https://${DIKTATOR_API_SERVICE_NAME}-${DIKTATOR_REGION:-${DIKTATOR_DEFAULT_REGION}}.run.app"}"
echo "Firebase Project: ${DIKTATOR_PROJECT_ID}"
echo "Storage Bucket: ${DIKTATOR_FIREBASE_STORAGE_BUCKET:-${DIKTATOR_PROJECT_ID}.appspot.com}"
"""

[tasks.config-check]
description = "Check all configuration values across environments"
run = """
echo "=== STATIC CONFIGURATION (mise.toml) ==="
echo "App Name: ${DIKTATOR_APP_NAME}"
echo "API Service: ${DIKTATOR_API_SERVICE_NAME}"
echo "Default Region: ${DIKTATOR_DEFAULT_REGION}"
echo "Bucket Location: ${DIKTATOR_BUCKET_LOCATION}"
echo ""

echo "=== DEVELOPMENT CONFIGURATION ==="
if [ -f backend/.env.development ]; then
    echo "Backend Development Config (backend/.env.development):"
    echo "  $(grep GOOGLE_CLOUD_PROJECT backend/.env.development || echo 'GOOGLE_CLOUD_PROJECT: Not set')"
    echo "  $(grep GIN_MODE backend/.env.development || echo 'GIN_MODE: Not set')"
    echo "  $(grep FIREBASE_AUTH_EMULATOR_HOST backend/.env.development || echo 'Firebase emulators: Not configured')"
else
    echo "‚ùå Backend development config not found. Run 'mise run config-dev'"
fi

if [ -f frontend/.env.development ]; then
    echo "Frontend Development Config (frontend/.env.development):"
    echo "  $(grep NEXT_PUBLIC_API_URL frontend/.env.development || echo 'API URL: Not set')"
    echo "  $(grep NEXT_PUBLIC_FIREBASE_USE_EMULATOR frontend/.env.development || echo 'Firebase emulator: Not set')"
    echo "  $(grep NEXT_PUBLIC_FIREBASE_PROJECT_ID frontend/.env.development || echo 'Firebase project: Not set')"
else
    echo "‚ùå Frontend development config not found. Run 'mise run config-dev'"
fi
echo ""

echo "=== PRODUCTION CONFIGURATION ==="
if [ -f .mise.env ]; then
    echo "Terraform Outputs (.mise.env):"
    source .mise.env
    echo "  Project ID: ${DIKTATOR_PROJECT_ID:-'Not set'}"
    echo "  Region: ${DIKTATOR_REGION:-'Not set'}"
    echo "  Frontend Bucket: ${DIKTATOR_FRONTEND_BUCKET:-'Not set'}"
    echo "  API URL: ${DIKTATOR_API_URL:-'Not set'}"
    echo "  Firebase API Key: ${DIKTATOR_FIREBASE_API_KEY:+Set}"${DIKTATOR_FIREBASE_API_KEY:-'Not set'}"
else
    echo "‚ùå No terraform outputs found. Run 'mise run config-load'"
fi

if [ -f backend/.env.production ]; then
    echo "Backend Production Config (backend/.env.production):"
    echo "  $(grep GOOGLE_CLOUD_PROJECT backend/.env.production || echo 'GOOGLE_CLOUD_PROJECT: Not set')"
    echo "  $(grep GIN_MODE backend/.env.production || echo 'GIN_MODE: Not set')"
else
    echo "‚ùå Backend production config not found. Run 'mise run config-prod'"
fi

if [ -f frontend/.env.production ]; then
    echo "Frontend Production Config (frontend/.env.production):"
    echo "  $(grep NEXT_PUBLIC_API_URL frontend/.env.production || echo 'API URL: Not set')"
    echo "  $(grep NEXT_PUBLIC_FIREBASE_USE_EMULATOR frontend/.env.production || echo 'Firebase emulator: Not set')"
else
    echo "‚ùå Frontend production config not found. Run 'mise run config-prod'"
fi
echo ""

echo "=== CURRENT MISE ENVIRONMENT ==="
echo "NODE_ENV: ${NODE_ENV}"
echo "GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT}"
echo "NEXT_PUBLIC_FIREBASE_USE_EMULATOR: ${NEXT_PUBLIC_FIREBASE_USE_EMULATOR}"
echo ""

echo "=== CONFIGURATION SETUP COMMANDS ==="
echo "For development: mise run config-dev"
echo "For production: mise run config-load && mise run config-prod"
"""
