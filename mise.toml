[tools]
node = "20"
go = "1.21"
opentofu = "latest"

# Environment configurations
[env]
# Static configuration - defaults for all environments
DIKTATOR_APP_NAME = "diktator"
DIKTATOR_API_SERVICE_NAME = "diktator-api"
DIKTATOR_DEFAULT_REGION = "europe-north1"
DIKTATOR_DEFAULT_PORT = "8080"
DIKTATOR_BUCKET_LOCATION = "EU"

# Development environment defaults
NODE_ENV = "development"
GOOGLE_CLOUD_PROJECT = "diktator-dev"

# Next.js development defaults
NEXT_PUBLIC_API_URL = "http://localhost:8080"

[tasks.install]
description = "Install all dependencies"
run = ["cd frontend && npm install", "cd backend && go mod tidy"]

[tasks.dev]
description = "Start both frontend and backend in development mode"
run = """
# Start backend in background
cd backend && go run cmd/server/main.go &
BACKEND_PID=$!
echo "Backend started with PID: $BACKEND_PID"

# Wait a moment for backend to start
sleep 2

# Start frontend (this will block)
cd frontend && npm run dev

# Cleanup function (won't be reached due to frontend blocking, but good practice)
cleanup() {
    echo "Stopping backend (PID: $BACKEND_PID)..."
    kill $BACKEND_PID 2>/dev/null || true
}
trap cleanup EXIT
"""

[tasks.frontend]
description = "Start frontend development server"
run = "cd frontend && npm run dev"

[tasks.backend]
description = "Start backend development server"
run = "cd backend && go run cmd/server/main.go"

[tasks.test]
description = "Run all tests"
run = [
  "cd frontend && npm run lint && npm run type-check",
  "cd backend && go test ./... && go vet ./...",
]

[tasks.test-frontend]
description = "Run frontend tests and linting"
run = "cd frontend && npm run lint && npm run type-check"

[tasks.test-backend]
description = "Run backend tests"
run = "cd backend && go test ./... && go vet ./..."

[tasks.build]
description = "Build both frontend and backend"
run = [
  "cd frontend && npm run build",
  "cd backend && go build -o bin/server cmd/server/main.go",
]

[tasks.build-frontend]
description = "Build frontend for production"
run = "cd frontend && npm run build"

[tasks.build-backend]
description = "Build backend binary"
run = "cd backend && go build -o bin/server cmd/server/main.go"

[tasks.clean]
description = "Clean build artifacts"
run = ["rm -rf frontend/.next frontend/out", "rm -rf backend/bin"]

[tasks.terraform-init]
description = "Initialize OpenTofu"
run = "cd terraform && tofu init"

[tasks.terraform-plan]
description = "Plan OpenTofu deployment"
run = "cd terraform && tofu plan"

[tasks.terraform-apply]
description = "Apply OpenTofu configuration"
run = "cd terraform && tofu apply"

[tasks.terraform-destroy]
description = "Destroy OpenTofu infrastructure"
run = "cd terraform && tofu destroy"

[tasks.tofu-init]
description = "Initialize OpenTofu"
run = "cd terraform && tofu init"

[tasks.tofu-plan]
description = "Plan OpenTofu deployment"
run = "cd terraform && tofu plan"

[tasks.tofu-apply]
description = "Apply OpenTofu configuration"
run = "cd terraform && tofu apply"

[tasks.tofu-destroy]
description = "Destroy OpenTofu infrastructure"
run = "cd terraform && tofu destroy"

[tasks.tofu-output]
description = "Show OpenTofu outputs"
run = "cd terraform && tofu output"

[tasks.tofu-validate]
description = "Validate OpenTofu configuration"
run = "cd terraform && tofu validate"

[tasks.tofu-fmt]
description = "Format OpenTofu configuration files"
run = "cd terraform && tofu fmt"

[tasks.setup]
description = "Complete project setup including dependencies and infrastructure"
run = """
echo "Installing dependencies..."
mise run install
echo "Dependencies installed."
echo ""
echo "Infrastructure setup options:"
echo "📋 Option 1 - Automatic (recommended):"
echo "   mise run tofu-auto-setup    # Uses current gcloud project"
echo "   mise run tofu-init && mise run tofu-apply"
echo ""
echo "📝 Option 2 - Manual:"
echo "   mise run tofu-setup         # Creates template to edit"
echo "   # Edit terraform/terraform.tfvars with your settings"
echo "   mise run tofu-init && mise run tofu-apply"
echo ""
echo "After infrastructure setup:"
echo "1. Load configuration: mise run config-load"
echo "2. Generate production environment: mise run env-production"
echo "3. Configure GitHub secrets from OpenTofu outputs"
echo "4. Start development: mise run dev"
echo ""
echo "💡 Use 'mise run config-check' to verify configuration at any time"
"""

[tasks.logs-backend]
description = "View backend logs"
run = "cd backend && go run cmd/server/main.go 2>&1 | tee backend.log"

[tasks.logs-frontend]
description = "View frontend logs"
run = "cd frontend && npm run dev 2>&1 | tee frontend.log"

[tasks.deploy-backend]
description = "Build and deploy backend to Cloud Run"
run = """
# Load dynamic configuration
mise run config-load
source .mise.env

echo "Building backend Docker image for project: ${DIKTATOR_PROJECT_ID}"
cd backend
docker buildx build --platform linux/amd64 --build-arg TARGETOS=linux --build-arg TARGETARCH=amd64 -t gcr.io/${DIKTATOR_PROJECT_ID}/${DIKTATOR_API_SERVICE_NAME}:latest --load .
echo "Pushing to GCR..."
docker push gcr.io/${DIKTATOR_PROJECT_ID}/${DIKTATOR_API_SERVICE_NAME}:latest
echo "Deploying to Cloud Run..."
gcloud run deploy ${DIKTATOR_API_SERVICE_NAME} \
  --image gcr.io/${DIKTATOR_PROJECT_ID}/${DIKTATOR_API_SERVICE_NAME}:latest \
  --region ${DIKTATOR_REGION} \
  --platform managed \
  --allow-unauthenticated \
  --set-env-vars="GOOGLE_CLOUD_PROJECT=${DIKTATOR_PROJECT_ID}"
echo "Backend deployed successfully!"
"""

[tasks.deploy-frontend]
description = "Build and deploy frontend to Cloud Storage"
run = """
# Load dynamic configuration
mise run config-load
source .mise.env

echo "Building frontend..."
cd frontend

# Generate production environment file
mise run env-production

# Source the generated .env.local file to get the environment variables
if [ -f .env.local ]; then
  set -a  # automatically export all variables
  source .env.local
  set +a  # disable automatic export
fi

# No asset prefix needed - serving from root domain via load balancer
export NODE_ENV=production
export NEXT_PUBLIC_API_URL=${DIKTATOR_API_URL:-"https://${DIKTATOR_API_SERVICE_NAME}-${DIKTATOR_REGION}.run.app"}
echo "Environment variables set:"
echo "  NODE_ENV=${NODE_ENV}"
echo "  NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}"
echo "  Domain: https://diktator.gc.flaatten.org/"
npm run build
echo "Deploying to Cloud Storage bucket: ${DIKTATOR_FRONTEND_BUCKET}"
gsutil -m cp -r out/* gs://${DIKTATOR_FRONTEND_BUCKET}/
echo "Setting cache headers..."
# Set index.html to never cache to ensure immediate updates
echo "  - Setting index.html to no-cache for immediate updates..."
gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" -h "Pragma:no-cache" -h "Expires:0" gs://${DIKTATOR_FRONTEND_BUCKET}/index.html || true
# Set other HTML files to short cache (5 minutes)
echo "  - Setting other HTML files to 5-minute cache..."
gsutil -m setmeta -h "Cache-Control:public, max-age=300" gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.html || true
# Reset index.html to no-cache (in case it was overwritten by the above)
gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" -h "Pragma:no-cache" -h "Expires:0" gs://${DIKTATOR_FRONTEND_BUCKET}/index.html || true
echo "  - Setting static assets to long-term cache..."
gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.js || true
gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.css || true
# Only set metadata for image files if they exist
if gsutil ls gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.png 2>/dev/null; then
  gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.png
fi
if gsutil ls gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.jpg 2>/dev/null; then
  gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.jpg
fi
if gsutil ls gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.svg 2>/dev/null; then
  gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${DIKTATOR_FRONTEND_BUCKET}/**/*.svg
fi
echo "Frontend deployed successfully!"
echo ""
echo "Invalidating CDN cache for updated routes..."
echo "  - Invalidating cache for / (homepage)"
gcloud compute url-maps invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/" --async || echo "Cache invalidation failed for /"
echo "  - Invalidating cache for /practice"
gcloud compute url-maps invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/practice" --async || echo "Cache invalidation failed for /practice"
echo "  - Invalidating cache for /practice/ (with trailing slash)"
gcloud compute url-maps invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/practice/" --async || echo "Cache invalidation failed for /practice/"
echo "  - Invalidating cache for /about"
gcloud compute url-maps invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/about" --async || echo "Cache invalidation failed for /about"
echo "  - Invalidating cache for /about/ (with trailing slash)"
gcloud compute url-maps invalidate-cdn-cache ${DIKTATOR_PROJECT_ID}-frontend-url-map --path="/about/" --async || echo "Cache invalidation failed for /about/"
echo "CDN cache invalidation initiated (will take 2-5 minutes to complete)"
echo ""
echo "Frontend URL (Static): https://storage.googleapis.com/${DIKTATOR_FRONTEND_BUCKET}/index.html"
echo "Frontend URL (Website): http://${DIKTATOR_FRONTEND_BUCKET}.storage.googleapis.com"
echo "Frontend URL (Load Balancer): https://diktator.gc.flaatten.org"
echo ""
echo "💡 For production, use the Load Balancer URL which provides:"
echo "   - HTTPS support with managed SSL certificates"
echo "   - CDN caching for better performance"
echo "   - Proper SPA routing with URL rewrites"
echo "   - Custom domain support (diktator.gc.flaatten.org)"
echo ""
echo "🔧 DNS Setup Required:"
echo "   Create A record: diktator.gc.flaatten.org → [Load Balancer IP]"
echo "   Run 'mise run lb-status' for detailed instructions"
"""

[tasks.ci-test-backend]
description = "Run backend tests for CI"
run = """
cd backend
go mod tidy
go test ./...
go vet ./...
"""

[tasks.ci-test-frontend]
description = "Run frontend tests for CI"
run = """
cd frontend
npm ci
npm run lint
npm run type-check
"""

[tasks.ci-build-backend]
description = "Build backend for CI/CD"
run = """
PROJECT_ID=${GOOGLE_CLOUD_PROJECT:-${DIKTATOR_PROJECT_ID}}
COMMIT_SHA=${GITHUB_SHA:-latest}
SERVICE_NAME=${DIKTATOR_API_SERVICE_NAME}

if [ -z "$PROJECT_ID" ]; then
  echo "Error: GOOGLE_CLOUD_PROJECT not set"
  exit 1
fi

cd backend
echo "Building Docker image: gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA}"
docker buildx build --platform linux/amd64 --build-arg TARGETOS=linux --build-arg TARGETARCH=amd64 -t gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA} --load .
docker push gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA}
"""

[tasks.ci-build-frontend]
description = "Build frontend for CI/CD"
run = """
cd frontend
npm ci
# No asset prefix needed - serving from root domain via load balancer
export NODE_ENV=production
npm run build
"""

[tasks.ci-deploy-backend]
description = "Deploy backend for CI/CD"
run = """
PROJECT_ID=${GOOGLE_CLOUD_PROJECT:-${DIKTATOR_PROJECT_ID}}
COMMIT_SHA=${GITHUB_SHA:-latest}
SERVICE_NAME=${DIKTATOR_API_SERVICE_NAME}
REGION=${GCP_REGION:-${DIKTATOR_DEFAULT_REGION}}

if [ -z "$PROJECT_ID" ]; then
  echo "Error: GOOGLE_CLOUD_PROJECT not set"
  exit 1
fi

echo "Deploying backend: gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA} to region: ${REGION}"
gcloud run deploy ${SERVICE_NAME} \
  --image gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${COMMIT_SHA} \
  --region ${REGION} \
  --platform managed \
  --allow-unauthenticated \
  --set-env-vars="GOOGLE_CLOUD_PROJECT=${PROJECT_ID}"
"""

[tasks.ci-deploy-frontend]
description = "Deploy frontend for CI/CD"
run = """
gsutil -m cp -r frontend/out/* gs://${GCP_FRONTEND_BUCKET}/
echo "Setting cache headers for deployed files..."
# Set index.html to never cache to ensure immediate updates
gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" -h "Pragma:no-cache" -h "Expires:0" gs://${GCP_FRONTEND_BUCKET}/index.html
# Set other HTML files to short cache (5 minutes)
gsutil -m setmeta -h "Cache-Control:public, max-age=300" gs://${GCP_FRONTEND_BUCKET}/**/*.html
# Reset index.html to no-cache (in case it was overwritten by the above)
gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" -h "Pragma:no-cache" -h "Expires:0" gs://${GCP_FRONTEND_BUCKET}/index.html
# Set static assets to long-term cache
gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${GCP_FRONTEND_BUCKET}/**/*.{js,css,png,jpg,jpeg,gif,ico,svg}
echo "Invalidating CDN cache for key routes..."
# Use GCP_PROJECT_ID in CI environment
PROJECT_ID=${GOOGLE_CLOUD_PROJECT:-${GCP_PROJECT_ID}}
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/" --async || echo "Cache invalidation failed for /"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/practice" --async || echo "Cache invalidation failed for /practice"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/practice/" --async || echo "Cache invalidation failed for /practice/"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/about" --async || echo "Cache invalidation failed for /about"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/about/" --async || echo "Cache invalidation failed for /about/"
echo "CDN cache invalidation initiated"
"""

[tasks.docker-build]
description = "Build Docker image locally"
run = """
cd backend
docker build -t diktator-api:local .
echo "Docker image built: diktator-api:local"
"""

[tasks.docker-run]
description = "Run backend Docker container locally"
run = """
docker run -p 8080:8080 -e GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-diktator-dev} diktator-api:local
"""

[tasks.dev-backend-only]
description = "Start only the backend development server"
run = "cd backend && go run cmd/server/main.go"

[tasks.dev-frontend-only]
description = "Start only the frontend development server"
run = "cd frontend && npm run dev"

[tasks.check]
description = "Run all checks (lint, type-check, test)"
run = "mise run test"

[tasks.fmt]
description = "Format all code"
run = """
echo "Formatting Go code..."
cd backend && go fmt ./...
echo "Formatting frontend code..."
cd frontend && npm run lint --fix 2>/dev/null || echo "Frontend formatting complete"
"""

[tasks.gcloud-auth]
description = "Authenticate with Google Cloud"
run = """
echo "Authenticating with Google Cloud..."
gcloud auth login
gcloud config list project
"""

[tasks.gcloud-set-project]
description = "Set Google Cloud project (pass project ID as argument)"
run = """
if [ -z "$1" ]; then
  echo "Usage: mise run gcloud-set-project -- YOUR_PROJECT_ID"
  echo "Current project: $(gcloud config get-value project 2>/dev/null || echo 'Not set')"
  exit 1
fi
echo "Setting Google Cloud project to: $1"
gcloud config set project "$1"
echo "Project set successfully!"
"""

[tasks.gcloud-enable-apis]
description = "Enable required Google Cloud APIs"
run = """
PROJECT_ID=$(gcloud config get-value project 2>/dev/null)
if [ -z "$PROJECT_ID" ]; then
  echo "Error: No Google Cloud project set. Run 'mise run gcloud-set-project -- YOUR_PROJECT_ID' first"
  exit 1
fi

echo "Enabling APIs for project: $PROJECT_ID"
gcloud services enable \
  run.googleapis.com \
  containerregistry.googleapis.com \
  storage.googleapis.com \
  iam.googleapis.com \
  cloudresourcemanager.googleapis.com
echo "APIs enabled successfully!"
"""

[tasks.env-check]
description = "Check environment variables (alias for config-check)"
run = "mise run config-check"

[tasks.env-setup]
description = "Set up environment files for development"
run = """
echo "Setting up environment files..."

# Frontend environment
if [ ! -f frontend/.env.local ]; then
  echo "Creating frontend/.env.local from template..."
  cp frontend/.env.example frontend/.env.local
  echo "✅ Frontend .env.local created from template"
  echo "📝 Edit frontend/.env.local to customize your settings"
else
  echo "ℹ️  Frontend .env.local already exists"
fi

# Backend environment (if needed)
if [ ! -f backend/.env ]; then
  echo "Creating backend/.env..."
  cat > backend/.env << 'EOF'
# Backend environment variables
GOOGLE_CLOUD_PROJECT=diktator-dev
PORT=8080
EOF
  echo "✅ Backend .env created"
else
  echo "ℹ️  Backend .env already exists"
fi

echo ""
echo "Environment setup complete! 🎉"
echo "Run 'mise run env-check' to verify your configuration"
"""

[tasks.tofu-setup]
description = "Set up OpenTofu configuration with your project details"
run = """
cd terraform

if [ ! -f terraform.tfvars ]; then
  echo "Creating terraform.tfvars from template..."
  cp terraform.tfvars.example terraform.tfvars
  echo "✅ terraform.tfvars created!"
  echo ""
  echo "📝 Please edit terraform/terraform.tfvars with your project details:"
  echo "   1. Set your project_id (required)"
  echo "   2. Optionally change region (default: europe-north1)"
  echo "   3. Optionally change bucket_location (default: EU)"
  echo "   4. Optionally set domain if you have one"
  echo ""
  echo "💡 You can get your current gcloud project with:"
  echo "   gcloud config get-value project"
else
  echo "ℹ️  terraform.tfvars already exists"
fi

echo ""
echo "Current terraform.tfvars content:"
echo "================================="
cat terraform.tfvars
echo "================================="
echo ""
echo "Next steps:"
echo "1. Edit terraform/terraform.tfvars if needed"
echo "2. Run: mise run tofu-init"
echo "3. Run: mise run tofu-plan"
echo "4. Run: mise run tofu-apply"
"""

[tasks.tofu-auto-setup]
description = "Automatically set up terraform.tfvars using current gcloud project"
run = """
cd terraform

PROJECT_ID=$(gcloud config get-value project 2>/dev/null)
if [ -z "$PROJECT_ID" ]; then
  echo "❌ No Google Cloud project is currently set"
  echo "Please run: gcloud config set project YOUR_PROJECT_ID"
  echo "Or run: mise run gcloud-set-project -- YOUR_PROJECT_ID"
  exit 1
fi

REGION=${1:-${DIKTATOR_DEFAULT_REGION}}

echo "Creating terraform.tfvars with your current gcloud settings..."
cat > terraform.tfvars << EOF
# OpenTofu variables - auto-generated from gcloud config
project_id      = "$PROJECT_ID"
region          = "$REGION"
bucket_location = "${DIKTATOR_BUCKET_LOCATION}"

# Optional: Uncomment and set if you have a custom domain
# domain = "yourdomain.com"
EOF

echo "✅ terraform.tfvars created with:"
echo "   project_id = $PROJECT_ID"
echo "   region     = $REGION"
echo "   bucket_location = ${DIKTATOR_BUCKET_LOCATION}"
echo ""
echo "📝 Edit terraform/terraform.tfvars if you want to change any settings"
echo ""
echo "Next steps:"
echo "1. Run: mise run tofu-init"
echo "2. Run: mise run tofu-plan"
echo "3. Run: mise run tofu-apply"
echo "4. Run: mise run config-load  # Load the new configuration"
"""

[tasks.setup-buildx]
description = "Set up Docker buildx for cross-platform builds"
run = """
./scripts/setup-buildx.sh
"""

[tasks.env-production]
description = "Generate .env file from OpenTofu outputs"
run = """
echo "Generating .env from OpenTofu outputs..."

# Load dynamic configuration
mise run config-load
source .mise.env

# Check if we have the required configuration
if [ -z "$DIKTATOR_FRONTEND_BUCKET" ] || [ -z "$DIKTATOR_PROJECT_ID" ]; then
  echo "❌ Could not load configuration. Make sure infrastructure is deployed with 'mise run tofu-apply'"
  exit 1
fi

# Refresh API URL in case it wasn't available during config-load
if [ -z "$DIKTATOR_API_URL" ]; then
  echo "⚠️  Trying to get API URL from Cloud Run..."
  DIKTATOR_API_URL=$(gcloud run services describe ${DIKTATOR_API_SERVICE_NAME} --region=${DIKTATOR_REGION} --format='value(status.url)' 2>/dev/null || echo "")
fi

if [ -z "$DIKTATOR_API_URL" ]; then
  echo "⚠️  Could not get backend URL from Cloud Run. Using placeholder."
  DIKTATOR_API_URL="https://${DIKTATOR_API_SERVICE_NAME}-XXXXXXXXX.${DIKTATOR_REGION}.run.app"
fi

# Generate .env.local
cat > frontend/.env.local << EOF
# Production environment variables - Auto-generated from configuration
# Generated on: $(date)

# Backend API URL (from Cloud Run)
NEXT_PUBLIC_API_URL=${DIKTATOR_API_URL}

# No asset prefix needed - serving from root domain via Global external Application Load Balancer
# Domain: https://diktator.gc.flaatten.org/

# Firebase configuration (optional - only needed if using Firebase features)
# NEXT_PUBLIC_FIREBASE_API_KEY=your-firebase-api-key
# NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your-project.firebaseapp.com
# NEXT_PUBLIC_FIREBASE_PROJECT_ID=your-firebase-project-id
# NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your-project.appspot.com
# NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=123456789
# NEXT_PUBLIC_FIREBASE_APP_ID=1:123456789:web:abcdef123456

# Google Cloud Project (for production)
GOOGLE_CLOUD_PROJECT=${DIKTATOR_PROJECT_ID}
EOF

echo "✅ Generated frontend/.env.local with:"
echo "   NEXT_PUBLIC_API_URL=${DIKTATOR_API_URL}"
echo "   Domain: https://diktator.gc.flaatten.org/"
echo "   GOOGLE_CLOUD_PROJECT=${DIKTATOR_PROJECT_ID}"
echo ""
echo "🌍 Frontend URLs:"
echo "   Production: https://diktator.gc.flaatten.org/"
echo "   Load Balancer IP: ${DIKTATOR_FRONTEND_LB_IP}"
echo ""
echo "�💡 .env.local is automatically used by Next.js and overrides .env values"
"""

[tasks.config-load]
description = "Load configuration from terraform outputs and set environment variables"
run = """
echo "Loading configuration from terraform outputs..."

# Check if terraform is initialized
if [ ! -d "terraform" ] || [ ! -f "terraform/.terraform.lock.hcl" ]; then
  echo "⚠️  OpenTofu not initialized. Some dynamic config will use defaults."
  echo "   Run 'mise run tofu-init && mise run tofu-apply' to enable dynamic config."
  exit 0
fi

# Read dynamic configuration from terraform outputs
cd terraform
export DIKTATOR_PROJECT_ID=$(tofu output -raw project_id 2>/dev/null || echo "${GOOGLE_CLOUD_PROJECT:-diktator-dev}")
export DIKTATOR_REGION=$(tofu output -raw region 2>/dev/null || echo "${DIKTATOR_DEFAULT_REGION}")
export DIKTATOR_FRONTEND_BUCKET=$(tofu output -raw frontend_bucket 2>/dev/null || echo "${DIKTATOR_PROJECT_ID}-${DIKTATOR_APP_NAME}-frontend")

# Try to get Cloud Run service URL
export DIKTATOR_API_URL=$(gcloud run services describe ${DIKTATOR_API_SERVICE_NAME} --region=${DIKTATOR_REGION} --format='value(status.url)' 2>/dev/null || echo "")

cd ..

echo "Configuration loaded:"
echo "  Project ID: ${DIKTATOR_PROJECT_ID}"
echo "  Region: ${DIKTATOR_REGION}"
echo "  Frontend Bucket: ${DIKTATOR_FRONTEND_BUCKET}"
echo "  API URL: ${DIKTATOR_API_URL:-'Not deployed yet'}"

# Export for use by other tasks
echo "export DIKTATOR_PROJECT_ID='${DIKTATOR_PROJECT_ID}'" > .mise.env
echo "export DIKTATOR_REGION='${DIKTATOR_REGION}'" >> .mise.env
echo "export DIKTATOR_FRONTEND_BUCKET='${DIKTATOR_FRONTEND_BUCKET}'" >> .mise.env
echo "export DIKTATOR_API_URL='${DIKTATOR_API_URL}'" >> .mise.env
echo "export GOOGLE_CLOUD_PROJECT='${DIKTATOR_PROJECT_ID}'" >> .mise.env
echo "export GCP_FRONTEND_BUCKET='${DIKTATOR_FRONTEND_BUCKET}'" >> .mise.env
echo "export GCP_REGION='${DIKTATOR_REGION}'" >> .mise.env

echo "✅ Configuration saved to .mise.env"
"""

[tasks.config-check]
description = "Check current configuration from all sources"
run = """
echo "=== Mise Environment Configuration ==="
echo "DIKTATOR_APP_NAME: ${DIKTATOR_APP_NAME}"
echo "DIKTATOR_API_SERVICE_NAME: ${DIKTATOR_API_SERVICE_NAME}"
echo "DIKTATOR_DEFAULT_REGION: ${DIKTATOR_DEFAULT_REGION}"
echo "DIKTATOR_DEFAULT_PORT: ${DIKTATOR_DEFAULT_PORT}"
echo "DIKTATOR_BUCKET_LOCATION: ${DIKTATOR_BUCKET_LOCATION}"
echo "DIKTATOR_ENV: ${DIKTATOR_ENV:-not set}"
echo ""

# Load dynamic config if available
if [ -f ".mise.env" ]; then
  echo "=== Dynamic Configuration (from .mise.env) ==="
  source .mise.env
  echo "DIKTATOR_PROJECT_ID: ${DIKTATOR_PROJECT_ID}"
  echo "DIKTATOR_REGION: ${DIKTATOR_REGION}"
  echo "DIKTATOR_FRONTEND_BUCKET: ${DIKTATOR_FRONTEND_BUCKET}"
  echo "DIKTATOR_API_URL: ${DIKTATOR_API_URL}"
  echo ""
else
  echo "=== Dynamic Configuration ==="
  echo "⚠️  No .mise.env found. Run 'mise run config-load' to generate dynamic config."
  echo ""
fi

echo "=== Current Environment Variables ==="
echo "NODE_ENV: ${NODE_ENV:-Not set}"
echo "GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT:-Not set}"
echo "NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-Not set}"
echo "Production Domain: https://diktator.gc.flaatten.org/"
echo "GCP_FRONTEND_BUCKET: ${GCP_FRONTEND_BUCKET:-Not set (CI only)}"
echo "GCP_REGION: ${GCP_REGION:-Not set (CI only)}"
echo ""

echo "=== Google Cloud Status ==="
echo "Current gcloud project: $(gcloud config get-value project 2>/dev/null || echo 'Not set')"
echo "Authenticated as: $(gcloud config get-value account 2>/dev/null || echo 'Not authenticated')"
"""

[tasks.open-frontend]
description = "Open the frontend website in the browser"
run = """
# Load dynamic configuration
source .mise.env

if [ -z "$DIKTATOR_FRONTEND_BUCKET" ]; then
  echo "❌ Frontend bucket not configured. Run 'mise run config-load' first."
  exit 1
fi

WEBSITE_URL="http://${DIKTATOR_FRONTEND_BUCKET}.storage.googleapis.com"
echo "Opening frontend website: ${WEBSITE_URL}"
open "${WEBSITE_URL}"
"""

[tasks.lb-status]
description = "Check load balancer and domain status"
run = """
# Load dynamic configuration
source .mise.env

if [ ! -d "terraform" ] || [ ! -f "terraform/.terraform.lock.hcl" ]; then
  echo "❌ OpenTofu not initialized. Run 'mise run tofu-init' first."
  exit 1
fi

cd terraform
echo "🌐 Load Balancer Status:"
echo "========================"

# Get load balancer IP
LB_IP=$(tofu output -raw frontend_lb_ip 2>/dev/null || echo "Not deployed")
echo "Load Balancer IP: ${LB_IP}"

# Get domain
DOMAIN="diktator.gc.flaatten.org"
echo "Domain: ${DOMAIN}"

if [ "${LB_IP}" != "Not deployed" ]; then
  echo ""
  echo "📋 DNS Setup Instructions:"
  echo "=========================="
  echo "Create the following DNS A record:"
  echo "  Name: diktator.gc.flaatten.org"
  echo "  Type: A"
  echo "  Value: ${LB_IP}"
  echo "  TTL: 300 (or your preferred value)"
  echo ""
  echo "3. Check certificate status:"
  echo "   gcloud compute ssl-certificates describe diktator-app-frontend-ssl --global"
  echo ""
  echo "🔍 Test URLs:"
  echo "   HTTP (redirects to HTTPS): http://${LB_IP}"
  echo "   HTTPS: https://${DOMAIN}"
else
  echo ""
  echo "⚠️  Load balancer not deployed. Run 'mise run tofu-apply' to create it."
fi
"""

[tasks.invalidate-cdn]
description = "Invalidate CDN cache for frontend routes"
run = """
source .mise.env || true
PROJECT_ID=${DIKTATOR_PROJECT_ID:-${GOOGLE_CLOUD_PROJECT}}

if [ -z "$PROJECT_ID" ]; then
  echo "Error: Project ID not found. Make sure to run 'mise run config-load' first."
  exit 1
fi

echo "Invalidating CDN cache for all frontend routes..."
echo "Project: ${PROJECT_ID}"
echo "URL Map: ${PROJECT_ID}-frontend-url-map"
echo ""

# Main routes
echo "🔄 Invalidating cache for key routes:"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/" --async && echo "  ✅ / (homepage)" || echo "  ❌ / failed"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/practice" --async && echo "  ✅ /practice" || echo "  ❌ /practice failed"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/practice/" --async && echo "  ✅ /practice/" || echo "  ❌ /practice/ failed"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/about" --async && echo "  ✅ /about" || echo "  ❌ /about failed"
gcloud compute url-maps invalidate-cdn-cache ${PROJECT_ID}-frontend-url-map --path="/about/" --async && echo "  ✅ /about/" || echo "  ❌ /about/ failed"

echo ""
echo "⏱️  CDN cache invalidation initiated. Changes will be visible in 2-5 minutes."
echo "🌍 Production URL: https://diktator.gc.flaatten.org/"
"""
