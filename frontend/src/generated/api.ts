/* tslint:disable */
/* eslint-disable */
/**
 * Diktator API
 * A family-friendly spelling test application API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@diktator.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiUsersPostRequest
 */
export interface ApiUsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPostRequest
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsersPostRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ApiWordsetsVoicesGet200Response
 */
export interface ApiWordsetsVoicesGet200Response {
    /**
     * 
     * @type {Array<object>}
     * @memberof ApiWordsetsVoicesGet200Response
     */
    'data'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof ApiWordsetsVoicesGet200Response
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiWordsetsVoicesGet200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ModelsAPIResponse
 */
export interface ModelsAPIResponse {
    /**
     * 
     * @type {object}
     * @memberof ModelsAPIResponse
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof ModelsAPIResponse
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAPIResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ModelsChildAccount
 */
export interface ModelsChildAccount {
    /**
     * 
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'familyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'id'?: string;
    /**
     * Parents can deactivate child accounts
     * @type {boolean}
     * @memberof ModelsChildAccount
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'lastActiveAt'?: string;
    /**
     * The parent who created this child account
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'parentId'?: string;
    /**
     * Always \"child\"
     * @type {string}
     * @memberof ModelsChildAccount
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ModelsCreateChildAccountRequest
 */
export interface ModelsCreateChildAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateChildAccountRequest
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateChildAccountRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateChildAccountRequest
     */
    'familyId': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateChildAccountRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ModelsCreateWordSetRequest
 */
export interface ModelsCreateWordSetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateWordSetRequest
     */
    'language': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateWordSetRequest
     */
    'name': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelsCreateWordSetRequest
     */
    'testConfiguration'?: { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelsCreateWordSetRequest
     */
    'words': Array<string>;
}
/**
 * 
 * @export
 * @interface ModelsSaveResultRequest
 */
export interface ModelsSaveResultRequest {
    /**
     * 
     * @type {number}
     * @memberof ModelsSaveResultRequest
     */
    'correctWords': number;
    /**
     * Deprecated: Use Words field for detailed information
     * @type {Array<string>}
     * @memberof ModelsSaveResultRequest
     */
    'incorrectWords'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ModelsSaveResultRequest
     */
    'score': number;
    /**
     * 
     * @type {number}
     * @memberof ModelsSaveResultRequest
     */
    'timeSpent'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsSaveResultRequest
     */
    'totalWords': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsSaveResultRequest
     */
    'wordSetId': string;
    /**
     * Detailed information for each word in the test
     * @type {Array<ModelsWordTestResult>}
     * @memberof ModelsSaveResultRequest
     */
    'words'?: Array<ModelsWordTestResult>;
}
/**
 * 
 * @export
 * @interface ModelsUpdateWordSetRequest
 */
export interface ModelsUpdateWordSetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateWordSetRequest
     */
    'language': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateWordSetRequest
     */
    'name': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelsUpdateWordSetRequest
     */
    'testConfiguration'?: { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelsUpdateWordSetRequest
     */
    'words': Array<string>;
}
/**
 * 
 * @export
 * @interface ModelsWordTestResult
 */
export interface ModelsWordTestResult {
    /**
     * Number of attempts made
     * @type {number}
     * @memberof ModelsWordTestResult
     */
    'attempts'?: number;
    /**
     * Number of times audio was played
     * @type {number}
     * @memberof ModelsWordTestResult
     */
    'audioPlayCount'?: number;
    /**
     * Whether the word was answered correctly
     * @type {boolean}
     * @memberof ModelsWordTestResult
     */
    'correct'?: boolean;
    /**
     * The final answer provided
     * @type {string}
     * @memberof ModelsWordTestResult
     */
    'finalAnswer'?: string;
    /**
     * Number of hints used (if applicable)
     * @type {number}
     * @memberof ModelsWordTestResult
     */
    'hintsUsed'?: number;
    /**
     * Time spent on this word in seconds
     * @type {number}
     * @memberof ModelsWordTestResult
     */
    'timeSpent'?: number;
    /**
     * All answers the user provided for this word
     * @type {Array<string>}
     * @memberof ModelsWordTestResult
     */
    'userAnswers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ModelsWordTestResult
     */
    'word'?: string;
}

/**
 * ChildrenApi - axios parameter creator
 * @export
 */
export const ChildrenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a child account (parent only)
         * @summary Delete Child Account
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdDelete: async (childId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'childId' is not null or undefined
            assertParamExists('apiFamiliesChildrenChildIdDelete', 'childId', childId)
            const localVarPath = `/api/families/children/{childId}`
                .replace(`{${"childId"}}`, encodeURIComponent(String(childId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get progress data for a specific child
         * @summary Get Child Progress
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdProgressGet: async (childId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'childId' is not null or undefined
            assertParamExists('apiFamiliesChildrenChildIdProgressGet', 'childId', childId)
            const localVarPath = `/api/families/children/{childId}/progress`
                .replace(`{${"childId"}}`, encodeURIComponent(String(childId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing child account (parent only)
         * @summary Update Child Account
         * @param {string} childId Child ID
         * @param {ModelsChildAccount} request Updated child account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdPut: async (childId: string, request: ModelsChildAccount, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'childId' is not null or undefined
            assertParamExists('apiFamiliesChildrenChildIdPut', 'childId', childId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('apiFamiliesChildrenChildIdPut', 'request', request)
            const localVarPath = `/api/families/children/{childId}`
                .replace(`{${"childId"}}`, encodeURIComponent(String(childId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test results for a specific child
         * @summary Get Child Results
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdResultsGet: async (childId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'childId' is not null or undefined
            assertParamExists('apiFamiliesChildrenChildIdResultsGet', 'childId', childId)
            const localVarPath = `/api/families/children/{childId}/results`
                .replace(`{${"childId"}}`, encodeURIComponent(String(childId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new child account (parent only)
         * @summary Create Child Account
         * @param {ModelsCreateChildAccountRequest} request Child account creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenPost: async (request: ModelsCreateChildAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('apiFamiliesChildrenPost', 'request', request)
            const localVarPath = `/api/families/children`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChildrenApi - functional programming interface
 * @export
 */
export const ChildrenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChildrenApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a child account (parent only)
         * @summary Delete Child Account
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesChildrenChildIdDelete(childId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesChildrenChildIdDelete(childId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChildrenApi.apiFamiliesChildrenChildIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get progress data for a specific child
         * @summary Get Child Progress
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesChildrenChildIdProgressGet(childId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesChildrenChildIdProgressGet(childId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChildrenApi.apiFamiliesChildrenChildIdProgressGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing child account (parent only)
         * @summary Update Child Account
         * @param {string} childId Child ID
         * @param {ModelsChildAccount} request Updated child account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesChildrenChildIdPut(childId: string, request: ModelsChildAccount, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesChildrenChildIdPut(childId, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChildrenApi.apiFamiliesChildrenChildIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get test results for a specific child
         * @summary Get Child Results
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesChildrenChildIdResultsGet(childId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesChildrenChildIdResultsGet(childId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChildrenApi.apiFamiliesChildrenChildIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new child account (parent only)
         * @summary Create Child Account
         * @param {ModelsCreateChildAccountRequest} request Child account creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesChildrenPost(request: ModelsCreateChildAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesChildrenPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChildrenApi.apiFamiliesChildrenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChildrenApi - factory interface
 * @export
 */
export const ChildrenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChildrenApiFp(configuration)
    return {
        /**
         * Delete a child account (parent only)
         * @summary Delete Child Account
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdDelete(childId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesChildrenChildIdDelete(childId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get progress data for a specific child
         * @summary Get Child Progress
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdProgressGet(childId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesChildrenChildIdProgressGet(childId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing child account (parent only)
         * @summary Update Child Account
         * @param {string} childId Child ID
         * @param {ModelsChildAccount} request Updated child account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdPut(childId: string, request: ModelsChildAccount, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesChildrenChildIdPut(childId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get test results for a specific child
         * @summary Get Child Results
         * @param {string} childId Child ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenChildIdResultsGet(childId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesChildrenChildIdResultsGet(childId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new child account (parent only)
         * @summary Create Child Account
         * @param {ModelsCreateChildAccountRequest} request Child account creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenPost(request: ModelsCreateChildAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesChildrenPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChildrenApi - interface
 * @export
 * @interface ChildrenApi
 */
export interface ChildrenApiInterface {
    /**
     * Delete a child account (parent only)
     * @summary Delete Child Account
     * @param {string} childId Child ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApiInterface
     */
    apiFamiliesChildrenChildIdDelete(childId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get progress data for a specific child
     * @summary Get Child Progress
     * @param {string} childId Child ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApiInterface
     */
    apiFamiliesChildrenChildIdProgressGet(childId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Update an existing child account (parent only)
     * @summary Update Child Account
     * @param {string} childId Child ID
     * @param {ModelsChildAccount} request Updated child account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApiInterface
     */
    apiFamiliesChildrenChildIdPut(childId: string, request: ModelsChildAccount, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get test results for a specific child
     * @summary Get Child Results
     * @param {string} childId Child ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApiInterface
     */
    apiFamiliesChildrenChildIdResultsGet(childId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Create a new child account (parent only)
     * @summary Create Child Account
     * @param {ModelsCreateChildAccountRequest} request Child account creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApiInterface
     */
    apiFamiliesChildrenPost(request: ModelsCreateChildAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

}

/**
 * ChildrenApi - object-oriented interface
 * @export
 * @class ChildrenApi
 * @extends {BaseAPI}
 */
export class ChildrenApi extends BaseAPI implements ChildrenApiInterface {
    /**
     * Delete a child account (parent only)
     * @summary Delete Child Account
     * @param {string} childId Child ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApi
     */
    public apiFamiliesChildrenChildIdDelete(childId: string, options?: RawAxiosRequestConfig) {
        return ChildrenApiFp(this.configuration).apiFamiliesChildrenChildIdDelete(childId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get progress data for a specific child
     * @summary Get Child Progress
     * @param {string} childId Child ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApi
     */
    public apiFamiliesChildrenChildIdProgressGet(childId: string, options?: RawAxiosRequestConfig) {
        return ChildrenApiFp(this.configuration).apiFamiliesChildrenChildIdProgressGet(childId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing child account (parent only)
     * @summary Update Child Account
     * @param {string} childId Child ID
     * @param {ModelsChildAccount} request Updated child account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApi
     */
    public apiFamiliesChildrenChildIdPut(childId: string, request: ModelsChildAccount, options?: RawAxiosRequestConfig) {
        return ChildrenApiFp(this.configuration).apiFamiliesChildrenChildIdPut(childId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get test results for a specific child
     * @summary Get Child Results
     * @param {string} childId Child ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApi
     */
    public apiFamiliesChildrenChildIdResultsGet(childId: string, options?: RawAxiosRequestConfig) {
        return ChildrenApiFp(this.configuration).apiFamiliesChildrenChildIdResultsGet(childId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new child account (parent only)
     * @summary Create Child Account
     * @param {ModelsCreateChildAccountRequest} request Child account creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildrenApi
     */
    public apiFamiliesChildrenPost(request: ModelsCreateChildAccountRequest, options?: RawAxiosRequestConfig) {
        return ChildrenApiFp(this.configuration).apiFamiliesChildrenPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FamiliesApi - axios parameter creator
 * @export
 */
export const FamiliesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all children in the authenticated user\'s family
         * @summary Get Family Children
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/families/children`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the user\'s family
         * @summary Get Family Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get progress data for all family members
         * @summary Get Family Progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesProgressGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/families/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test results for all members of the authenticated user\'s family
         * @summary Get Family Results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesResultsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/families/results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get statistical data for the authenticated user\'s family
         * @summary Get Family Statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesStatsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/families/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamiliesApi - functional programming interface
 * @export
 */
export const FamiliesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FamiliesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all children in the authenticated user\'s family
         * @summary Get Family Children
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesChildrenGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesChildrenGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamiliesApi.apiFamiliesChildrenGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get information about the user\'s family
         * @summary Get Family Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamiliesApi.apiFamiliesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get progress data for all family members
         * @summary Get Family Progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesProgressGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesProgressGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamiliesApi.apiFamiliesProgressGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get test results for all members of the authenticated user\'s family
         * @summary Get Family Results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesResultsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesResultsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamiliesApi.apiFamiliesResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get statistical data for the authenticated user\'s family
         * @summary Get Family Statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFamiliesStatsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFamiliesStatsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FamiliesApi.apiFamiliesStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FamiliesApi - factory interface
 * @export
 */
export const FamiliesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FamiliesApiFp(configuration)
    return {
        /**
         * Get all children in the authenticated user\'s family
         * @summary Get Family Children
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesChildrenGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesChildrenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about the user\'s family
         * @summary Get Family Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get progress data for all family members
         * @summary Get Family Progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesProgressGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesProgressGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get test results for all members of the authenticated user\'s family
         * @summary Get Family Results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesResultsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesResultsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get statistical data for the authenticated user\'s family
         * @summary Get Family Statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFamiliesStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiFamiliesStatsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FamiliesApi - interface
 * @export
 * @interface FamiliesApi
 */
export interface FamiliesApiInterface {
    /**
     * Get all children in the authenticated user\'s family
     * @summary Get Family Children
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApiInterface
     */
    apiFamiliesChildrenGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get information about the user\'s family
     * @summary Get Family Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApiInterface
     */
    apiFamiliesGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get progress data for all family members
     * @summary Get Family Progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApiInterface
     */
    apiFamiliesProgressGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get test results for all members of the authenticated user\'s family
     * @summary Get Family Results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApiInterface
     */
    apiFamiliesResultsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get statistical data for the authenticated user\'s family
     * @summary Get Family Statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApiInterface
     */
    apiFamiliesStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

}

/**
 * FamiliesApi - object-oriented interface
 * @export
 * @class FamiliesApi
 * @extends {BaseAPI}
 */
export class FamiliesApi extends BaseAPI implements FamiliesApiInterface {
    /**
     * Get all children in the authenticated user\'s family
     * @summary Get Family Children
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApi
     */
    public apiFamiliesChildrenGet(options?: RawAxiosRequestConfig) {
        return FamiliesApiFp(this.configuration).apiFamiliesChildrenGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about the user\'s family
     * @summary Get Family Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApi
     */
    public apiFamiliesGet(options?: RawAxiosRequestConfig) {
        return FamiliesApiFp(this.configuration).apiFamiliesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get progress data for all family members
     * @summary Get Family Progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApi
     */
    public apiFamiliesProgressGet(options?: RawAxiosRequestConfig) {
        return FamiliesApiFp(this.configuration).apiFamiliesProgressGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get test results for all members of the authenticated user\'s family
     * @summary Get Family Results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApi
     */
    public apiFamiliesResultsGet(options?: RawAxiosRequestConfig) {
        return FamiliesApiFp(this.configuration).apiFamiliesResultsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get statistical data for the authenticated user\'s family
     * @summary Get Family Statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamiliesApi
     */
    public apiFamiliesStatsGet(options?: RawAxiosRequestConfig) {
        return FamiliesApiFp(this.configuration).apiFamiliesStatsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the health status of the API
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the health status of the API
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Returns the health status of the API
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - interface
 * @export
 * @interface HealthApi
 */
export interface HealthApiInterface {
    /**
     * Returns the health status of the API
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    healthGet(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

}

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI implements HealthApiInterface {
    /**
     * Returns the health status of the API
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user account after Firebase authentication
         * @summary Create User
         * @param {ApiUsersPostRequest} request User creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (request: ApiUsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('apiUsersPost', 'request', request)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s profile information
         * @summary Get User Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test results for the authenticated user
         * @summary Get Test Results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersResultsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save a test result for the authenticated user
         * @summary Save Test Result
         * @param {ModelsSaveResultRequest} request Test result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersResultsPost: async (request: ModelsSaveResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('apiUsersResultsPost', 'request', request)
            const localVarPath = `/api/users/results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user account after Firebase authentication
         * @summary Create User
         * @param {ApiUsersPostRequest} request User creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(request: ApiUsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the current user\'s profile information
         * @summary Get User Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersProfileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersProfileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get test results for the authenticated user
         * @summary Get Test Results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersResultsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersResultsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Save a test result for the authenticated user
         * @summary Save Test Result
         * @param {ModelsSaveResultRequest} request Test result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersResultsPost(request: ModelsSaveResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersResultsPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersResultsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Create a new user account after Firebase authentication
         * @summary Create User
         * @param {ApiUsersPostRequest} request User creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(request: ApiUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiUsersPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s profile information
         * @summary Get User Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiUsersProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get test results for the authenticated user
         * @summary Get Test Results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersResultsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiUsersResultsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Save a test result for the authenticated user
         * @summary Save Test Result
         * @param {ModelsSaveResultRequest} request Test result data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersResultsPost(request: ModelsSaveResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiUsersResultsPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * Create a new user account after Firebase authentication
     * @summary Create User
     * @param {ApiUsersPostRequest} request User creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    apiUsersPost(request: ApiUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get the current user\'s profile information
     * @summary Get User Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    apiUsersProfileGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get test results for the authenticated user
     * @summary Get Test Results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    apiUsersResultsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Save a test result for the authenticated user
     * @summary Save Test Result
     * @param {ModelsSaveResultRequest} request Test result data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    apiUsersResultsPost(request: ModelsSaveResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * Create a new user account after Firebase authentication
     * @summary Create User
     * @param {ApiUsersPostRequest} request User creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersPost(request: ApiUsersPostRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s profile information
     * @summary Get User Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersProfileGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get test results for the authenticated user
     * @summary Get Test Results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersResultsGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersResultsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save a test result for the authenticated user
     * @summary Save Test Result
     * @param {ModelsSaveResultRequest} request Test result data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersResultsPost(request: ModelsSaveResultRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersResultsPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WordsetsApi - axios parameter creator
 * @export
 */
export const WordsetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get word sets for the authenticated user\'s family
         * @summary Get Word Sets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wordsets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream audio file for a specific audio ID within a wordset
         * @summary Stream Audio File by ID
         * @param {string} id WordSet ID
         * @param {string} audioId Audio ID to stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdAudioAudioIdGet: async (id: string, audioId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWordsetsIdAudioAudioIdGet', 'id', id)
            // verify required parameter 'audioId' is not null or undefined
            assertParamExists('apiWordsetsIdAudioAudioIdGet', 'audioId', audioId)
            const localVarPath = `/api/wordsets/{id}/audio/{audioId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"audioId"}}`, encodeURIComponent(String(audioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a word set by ID and all associated audio files from storage
         * @summary Delete Word Set
         * @param {string} id Word Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWordsetsIdDelete', 'id', id)
            const localVarPath = `/api/wordsets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate TTS audio for all words in a word set
         * @summary Generate Audio
         * @param {string} id Word Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdGenerateAudioPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWordsetsIdGenerateAudioPost', 'id', id)
            const localVarPath = `/api/wordsets/{id}/generate-audio`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing word set name, words, and configuration. Audio will be regenerated automatically for new/changed words.
         * @summary Update Word Set
         * @param {string} id Word Set ID
         * @param {ModelsUpdateWordSetRequest} request Word set update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdPut: async (id: string, request: ModelsUpdateWordSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWordsetsIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('apiWordsetsIdPut', 'request', request)
            const localVarPath = `/api/wordsets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new word set for practice
         * @summary Create Word Set
         * @param {ModelsCreateWordSetRequest} request Word set creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsPost: async (request: ModelsCreateWordSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('apiWordsetsPost', 'request', request)
            const localVarPath = `/api/wordsets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of available Text-to-Speech voices for a specific language
         * @summary List available TTS voices
         * @param {string} [language] Language code (e.g., \&#39;en\&#39;, \&#39;nb-NO\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsVoicesGet: async (language?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wordsets/voices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WordsetsApi - functional programming interface
 * @export
 */
export const WordsetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WordsetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get word sets for the authenticated user\'s family
         * @summary Get Word Sets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWordsetsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWordsetsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsetsApi.apiWordsetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stream audio file for a specific audio ID within a wordset
         * @summary Stream Audio File by ID
         * @param {string} id WordSet ID
         * @param {string} audioId Audio ID to stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWordsetsIdAudioAudioIdGet(id: string, audioId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWordsetsIdAudioAudioIdGet(id, audioId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsetsApi.apiWordsetsIdAudioAudioIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a word set by ID and all associated audio files from storage
         * @summary Delete Word Set
         * @param {string} id Word Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWordsetsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWordsetsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsetsApi.apiWordsetsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate TTS audio for all words in a word set
         * @summary Generate Audio
         * @param {string} id Word Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWordsetsIdGenerateAudioPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWordsetsIdGenerateAudioPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsetsApi.apiWordsetsIdGenerateAudioPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing word set name, words, and configuration. Audio will be regenerated automatically for new/changed words.
         * @summary Update Word Set
         * @param {string} id Word Set ID
         * @param {ModelsUpdateWordSetRequest} request Word set update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWordsetsIdPut(id: string, request: ModelsUpdateWordSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWordsetsIdPut(id, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsetsApi.apiWordsetsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new word set for practice
         * @summary Create Word Set
         * @param {ModelsCreateWordSetRequest} request Word set creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWordsetsPost(request: ModelsCreateWordSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWordsetsPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsetsApi.apiWordsetsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of available Text-to-Speech voices for a specific language
         * @summary List available TTS voices
         * @param {string} [language] Language code (e.g., \&#39;en\&#39;, \&#39;nb-NO\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWordsetsVoicesGet(language?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiWordsetsVoicesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWordsetsVoicesGet(language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WordsetsApi.apiWordsetsVoicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WordsetsApi - factory interface
 * @export
 */
export const WordsetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WordsetsApiFp(configuration)
    return {
        /**
         * Get word sets for the authenticated user\'s family
         * @summary Get Word Sets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiWordsetsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Stream audio file for a specific audio ID within a wordset
         * @summary Stream Audio File by ID
         * @param {string} id WordSet ID
         * @param {string} audioId Audio ID to stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdAudioAudioIdGet(id: string, audioId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.apiWordsetsIdAudioAudioIdGet(id, audioId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a word set by ID and all associated audio files from storage
         * @summary Delete Word Set
         * @param {string} id Word Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiWordsetsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate TTS audio for all words in a word set
         * @summary Generate Audio
         * @param {string} id Word Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdGenerateAudioPost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiWordsetsIdGenerateAudioPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing word set name, words, and configuration. Audio will be regenerated automatically for new/changed words.
         * @summary Update Word Set
         * @param {string} id Word Set ID
         * @param {ModelsUpdateWordSetRequest} request Word set update request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsIdPut(id: string, request: ModelsUpdateWordSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiWordsetsIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new word set for practice
         * @summary Create Word Set
         * @param {ModelsCreateWordSetRequest} request Word set creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsPost(request: ModelsCreateWordSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse> {
            return localVarFp.apiWordsetsPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of available Text-to-Speech voices for a specific language
         * @summary List available TTS voices
         * @param {string} [language] Language code (e.g., \&#39;en\&#39;, \&#39;nb-NO\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWordsetsVoicesGet(language?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiWordsetsVoicesGet200Response> {
            return localVarFp.apiWordsetsVoicesGet(language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WordsetsApi - interface
 * @export
 * @interface WordsetsApi
 */
export interface WordsetsApiInterface {
    /**
     * Get word sets for the authenticated user\'s family
     * @summary Get Word Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApiInterface
     */
    apiWordsetsGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Stream audio file for a specific audio ID within a wordset
     * @summary Stream Audio File by ID
     * @param {string} id WordSet ID
     * @param {string} audioId Audio ID to stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApiInterface
     */
    apiWordsetsIdAudioAudioIdGet(id: string, audioId: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * Delete a word set by ID and all associated audio files from storage
     * @summary Delete Word Set
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApiInterface
     */
    apiWordsetsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Generate TTS audio for all words in a word set
     * @summary Generate Audio
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApiInterface
     */
    apiWordsetsIdGenerateAudioPost(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Update an existing word set name, words, and configuration. Audio will be regenerated automatically for new/changed words.
     * @summary Update Word Set
     * @param {string} id Word Set ID
     * @param {ModelsUpdateWordSetRequest} request Word set update request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApiInterface
     */
    apiWordsetsIdPut(id: string, request: ModelsUpdateWordSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Create a new word set for practice
     * @summary Create Word Set
     * @param {ModelsCreateWordSetRequest} request Word set creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApiInterface
     */
    apiWordsetsPost(request: ModelsCreateWordSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAPIResponse>;

    /**
     * Get a list of available Text-to-Speech voices for a specific language
     * @summary List available TTS voices
     * @param {string} [language] Language code (e.g., \&#39;en\&#39;, \&#39;nb-NO\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApiInterface
     */
    apiWordsetsVoicesGet(language?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiWordsetsVoicesGet200Response>;

}

/**
 * WordsetsApi - object-oriented interface
 * @export
 * @class WordsetsApi
 * @extends {BaseAPI}
 */
export class WordsetsApi extends BaseAPI implements WordsetsApiInterface {
    /**
     * Get word sets for the authenticated user\'s family
     * @summary Get Word Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApi
     */
    public apiWordsetsGet(options?: RawAxiosRequestConfig) {
        return WordsetsApiFp(this.configuration).apiWordsetsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stream audio file for a specific audio ID within a wordset
     * @summary Stream Audio File by ID
     * @param {string} id WordSet ID
     * @param {string} audioId Audio ID to stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApi
     */
    public apiWordsetsIdAudioAudioIdGet(id: string, audioId: string, options?: RawAxiosRequestConfig) {
        return WordsetsApiFp(this.configuration).apiWordsetsIdAudioAudioIdGet(id, audioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a word set by ID and all associated audio files from storage
     * @summary Delete Word Set
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApi
     */
    public apiWordsetsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return WordsetsApiFp(this.configuration).apiWordsetsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate TTS audio for all words in a word set
     * @summary Generate Audio
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApi
     */
    public apiWordsetsIdGenerateAudioPost(id: string, options?: RawAxiosRequestConfig) {
        return WordsetsApiFp(this.configuration).apiWordsetsIdGenerateAudioPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing word set name, words, and configuration. Audio will be regenerated automatically for new/changed words.
     * @summary Update Word Set
     * @param {string} id Word Set ID
     * @param {ModelsUpdateWordSetRequest} request Word set update request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApi
     */
    public apiWordsetsIdPut(id: string, request: ModelsUpdateWordSetRequest, options?: RawAxiosRequestConfig) {
        return WordsetsApiFp(this.configuration).apiWordsetsIdPut(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new word set for practice
     * @summary Create Word Set
     * @param {ModelsCreateWordSetRequest} request Word set creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApi
     */
    public apiWordsetsPost(request: ModelsCreateWordSetRequest, options?: RawAxiosRequestConfig) {
        return WordsetsApiFp(this.configuration).apiWordsetsPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of available Text-to-Speech voices for a specific language
     * @summary List available TTS voices
     * @param {string} [language] Language code (e.g., \&#39;en\&#39;, \&#39;nb-NO\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordsetsApi
     */
    public apiWordsetsVoicesGet(language?: string, options?: RawAxiosRequestConfig) {
        return WordsetsApiFp(this.configuration).apiWordsetsVoicesGet(language, options).then((request) => request(this.axios, this.basePath));
    }
}



