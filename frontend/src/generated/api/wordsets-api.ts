/* tslint:disable */
/* eslint-disable */
/**
 * Diktator API
 * A family-friendly spelling test application API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@diktator.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { ModelsAPIResponse } from "../models";
// @ts-ignore
import type { ModelsCreateWordSetRequest } from "../models";
/**
 * WordsetsApi - axios parameter creator
 * @export
 */
export const WordsetsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get word sets for the authenticated user\'s family
     * @summary Get Word Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/wordsets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete a word set by ID
     * @summary Delete Word Set
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("wordsetsIdDelete", "id", id);
      const localVarPath = `/wordsets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Generate TTS audio for all words in a word set
     * @summary Generate Audio
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsIdGenerateAudioPost: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("wordsetsIdGenerateAudioPost", "id", id);
      const localVarPath = `/wordsets/{id}/generate-audio`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a new word set for practice
     * @summary Create Word Set
     * @param {ModelsCreateWordSetRequest} request Word set creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsPost: async (
      request: ModelsCreateWordSetRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists("wordsetsPost", "request", request);
      const localVarPath = `/wordsets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        request,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WordsetsApi - functional programming interface
 * @export
 */
export const WordsetsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WordsetsApiAxiosParamCreator(configuration);
  return {
    /**
     * Get word sets for the authenticated user\'s family
     * @summary Get Word Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async wordsetsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.wordsetsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WordsetsApi.wordsetsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a word set by ID
     * @summary Delete Word Set
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async wordsetsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.wordsetsIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WordsetsApi.wordsetsIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Generate TTS audio for all words in a word set
     * @summary Generate Audio
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async wordsetsIdGenerateAudioPost(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.wordsetsIdGenerateAudioPost(
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WordsetsApi.wordsetsIdGenerateAudioPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a new word set for practice
     * @summary Create Word Set
     * @param {ModelsCreateWordSetRequest} request Word set creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async wordsetsPost(
      request: ModelsCreateWordSetRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.wordsetsPost(
        request,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WordsetsApi.wordsetsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * WordsetsApi - factory interface
 * @export
 */
export const WordsetsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WordsetsApiFp(configuration);
  return {
    /**
     * Get word sets for the authenticated user\'s family
     * @summary Get Word Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .wordsetsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete a word set by ID
     * @summary Delete Word Set
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .wordsetsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Generate TTS audio for all words in a word set
     * @summary Generate Audio
     * @param {string} id Word Set ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsIdGenerateAudioPost(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .wordsetsIdGenerateAudioPost(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a new word set for practice
     * @summary Create Word Set
     * @param {ModelsCreateWordSetRequest} request Word set creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wordsetsPost(
      request: ModelsCreateWordSetRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .wordsetsPost(request, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WordsetsApi - object-oriented interface
 * @export
 * @class WordsetsApi
 * @extends {BaseAPI}
 */
export class WordsetsApi extends BaseAPI {
  /**
   * Get word sets for the authenticated user\'s family
   * @summary Get Word Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordsetsApi
   */
  public wordsetsGet(options?: RawAxiosRequestConfig) {
    return WordsetsApiFp(this.configuration)
      .wordsetsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete a word set by ID
   * @summary Delete Word Set
   * @param {string} id Word Set ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordsetsApi
   */
  public wordsetsIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return WordsetsApiFp(this.configuration)
      .wordsetsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Generate TTS audio for all words in a word set
   * @summary Generate Audio
   * @param {string} id Word Set ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordsetsApi
   */
  public wordsetsIdGenerateAudioPost(
    id: string,
    options?: RawAxiosRequestConfig,
  ) {
    return WordsetsApiFp(this.configuration)
      .wordsetsIdGenerateAudioPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a new word set for practice
   * @summary Create Word Set
   * @param {ModelsCreateWordSetRequest} request Word set creation request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WordsetsApi
   */
  public wordsetsPost(
    request: ModelsCreateWordSetRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WordsetsApiFp(this.configuration)
      .wordsetsPost(request, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
