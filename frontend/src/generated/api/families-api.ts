/* tslint:disable */
/* eslint-disable */
/**
 * Diktator API
 * A family-friendly spelling test application API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@diktator.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { ModelsAPIResponse } from "../models";
/**
 * FamiliesApi - axios parameter creator
 * @export
 */
export const FamiliesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get all children in the authenticated user\'s family
     * @summary Get Family Children
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesChildrenGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/families/children`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get information about the user\'s family
     * @summary Get Family Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/families`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get progress data for all family members
     * @summary Get Family Progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesProgressGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/families/progress`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get statistical data for the authenticated user\'s family
     * @summary Get Family Statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesStatsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/families/stats`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FamiliesApi - functional programming interface
 * @export
 */
export const FamiliesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FamiliesApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all children in the authenticated user\'s family
     * @summary Get Family Children
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async familiesChildrenGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.familiesChildrenGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FamiliesApi.familiesChildrenGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get information about the user\'s family
     * @summary Get Family Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async familiesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.familiesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FamiliesApi.familiesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get progress data for all family members
     * @summary Get Family Progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async familiesProgressGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.familiesProgressGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FamiliesApi.familiesProgressGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get statistical data for the authenticated user\'s family
     * @summary Get Family Statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async familiesStatsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ModelsAPIResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.familiesStatsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FamiliesApi.familiesStatsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * FamiliesApi - factory interface
 * @export
 */
export const FamiliesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FamiliesApiFp(configuration);
  return {
    /**
     * Get all children in the authenticated user\'s family
     * @summary Get Family Children
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesChildrenGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .familiesChildrenGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get information about the user\'s family
     * @summary Get Family Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .familiesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get progress data for all family members
     * @summary Get Family Progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesProgressGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .familiesProgressGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get statistical data for the authenticated user\'s family
     * @summary Get Family Statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    familiesStatsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ModelsAPIResponse> {
      return localVarFp
        .familiesStatsGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FamiliesApi - object-oriented interface
 * @export
 * @class FamiliesApi
 * @extends {BaseAPI}
 */
export class FamiliesApi extends BaseAPI {
  /**
   * Get all children in the authenticated user\'s family
   * @summary Get Family Children
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FamiliesApi
   */
  public familiesChildrenGet(options?: RawAxiosRequestConfig) {
    return FamiliesApiFp(this.configuration)
      .familiesChildrenGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get information about the user\'s family
   * @summary Get Family Information
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FamiliesApi
   */
  public familiesGet(options?: RawAxiosRequestConfig) {
    return FamiliesApiFp(this.configuration)
      .familiesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get progress data for all family members
   * @summary Get Family Progress
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FamiliesApi
   */
  public familiesProgressGet(options?: RawAxiosRequestConfig) {
    return FamiliesApiFp(this.configuration)
      .familiesProgressGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get statistical data for the authenticated user\'s family
   * @summary Get Family Statistics
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FamiliesApi
   */
  public familiesStatsGet(options?: RawAxiosRequestConfig) {
    return FamiliesApiFp(this.configuration)
      .familiesStatsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
